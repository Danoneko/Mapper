import logging
import uuid
from dataclasses import dataclass

from sqlalchemy.orm import query
from telegram import Update, CallbackQuery
from telegram.constants import ChatAction
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

from dal.osm_broker.broker import OpenMapsBroker
from dal.osm_broker.models import Location
from dal.storage.storage import Storage
from bot_service.menu import get_main_menu, get_categories_menu, get_callback_data_from_base64, get_nodes_menu, \
    get_cancel_menu, get_data_deletion_menu, get_back_menu

from geopy.distance import distance


@dataclass
class Status:
    STARTING = "starting"  # –ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –∂–¥–µ–º —à–∞—Ä –ª–æ–∫–∞—Ü–∏–∏
    IN_MENU = "InMenu"  # –õ–∏–±–æ –∑–∞–∫–æ–Ω—á–∏–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –ª–∏–±–æ –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª, –Ω–æ –ø–æ—à–∞—Ä–∏–ª –ª–æ–∫–∞—Ü–∏—é
    IN_CATEGORY = "InCategory"  # –í—ã–±—Ä–∞–ª –ø—É–Ω–∫—Ç –º–µ–Ω—é "–±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Å—Ç–æ"
    CHOOSING = "Choosing"  # –í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ—á–∫—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å
    IN_PROGRESS = "InProgress"  # –ò–¥–µ—Ç –¥–æ —Ç–æ—á–∫–∏
    UPDATING = "Updating"  # –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞


class BotService:
    def __init__(self, storage: Storage, osm_broker: OpenMapsBroker, bot_token: str):
        self.storage = storage
        self.osm_broker = osm_broker
        self.bot_token = bot_token
        self.__logger = logging.getLogger("bot_service")

    def initialize_bot(self):
        application = Application.builder().token(self.bot_token).build()

        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(MessageHandler(filters.LOCATION, self.location_handler))
        application.add_handler(CallbackQueryHandler(self.callback_handler))
        application.add_handler(MessageHandler(None, self.message_handler))

        return application

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        image_path = './icon.jpg'

        message = update.message if update.message else update.edited_message

        with open(image_path, 'rb') as image_file:
            await message.reply_photo(
                photo=image_file,
                caption='–ü—Ä–∏–≤–µ—Ç! üëã\n\n\
–≠—Ç–æ –±–æ—Ç-–ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å. –Ø —É–º–µ—é –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∏ –Ω—É–∂–Ω—ã–µ –¥–ª—è —Ç–µ–±—è –º–µ—Å—Ç–∞. \
–ê —Ç–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n\n\
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π live-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π üß≠'
            )

    async def location_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = update.message if update.message else update.edited_message

        user = self.storage.get_user(chat_id=message.chat_id)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        if not user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–µ–ª–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å LIVE-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–æ—á–∫–æ–π.

            if not message.location.live_period:
                await message.reply_text("‚ö†Ô∏è–ë–æ—Ç —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å live-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π ‚ö†Ô∏è")

                return

            self.storage.create_user(chat_id=message.chat_id, status=Status.STARTING,
                                     latitude=message.location.latitude,
                                     longitude=message.location.longitude)

            bot = message.get_bot()

            await message.reply_text('–£–¥–∞—á–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π! \n\n –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç /menu',
                                     reply_markup=get_main_menu())

            self.storage.update_user_status(chat_id=message.chat_id, status=Status.IN_MENU)

            return

        self.storage.update_user_location(chat_id=message.chat_id, latitude=message.location.latitude,
                                          longitude=message.location.longitude)

        # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –¥–æ —Ç–æ—á–∫–∏
        if user["status"] == Status.IN_PROGRESS:
            await context.bot.sendChatAction(chat_id=message.chat_id, action=ChatAction.TYPING)
            destination = self.storage.get_destination(user_id=user["id"])

            if destination and message.location.latitude and message.location.longitude:
                dist = distance((message.location.latitude, message.location.longitude),
                                (destination["latitude"], destination["longitude"])).meters

                bot = message.get_bot()

                if dist <= 30:
                    self.storage.update_user_status(chat_id=message.chat_id, status=Status.IN_MENU)
                    self.storage.delete_destination(user_id=user["id"])

                    try:
                        await bot.edit_message_text('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –¥–æ—à–ª–∏ –¥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è! \n –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!',
                                                    chat_id=message.chat_id, message_id=destination["message_id"])
                    except BadRequest as e:
                        await message.reply_text('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –¥–æ—à–ª–∏ –¥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è! \n –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!',
                                                 reply_markup=get_main_menu())

                    return

                try:
                    await bot.edit_message_text(f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ {destination["name"]}: {dist:.2f} –º–µ—Ç—Ä–æ–≤',
                                                chat_id=message.chat_id, message_id=destination["message_id"],
                                                reply_markup=get_cancel_menu())

                except BadRequest as e:
                    await message.reply_text(f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ {destination["name"]}: {dist:.2f} –º–µ—Ç—Ä–æ–≤',
                                             reply_markup=get_cancel_menu())

    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        user = self.storage.get_user(chat_id=query.message.chat.id)

        if not user:
            await query.edit_message_text('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ-–ª–æ–∫–∞—Ü–∏–µ–π')


        if query.data == "nearest":
            self.storage.update_user_status(chat_id=query.message.chat.id, status=Status.IN_CATEGORY)

            categories = self.storage.get_categories()

            await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=get_categories_menu(categories))

        elif query.data == "specific":
            self.storage.update_user_status(chat_id=query.message.chat.id, status=Status.CHOOSING)

            await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è,208',
                                          reply_markup=get_back_menu())

        elif query.data == "update":
            self.storage.update_user_status(chat_id=query.message.chat.id, status=Status.UPDATING)

            await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö')

        elif query.data == "back":
            destination = self.storage.get_destination(user_id=user["id"])

            if destination:
                self.storage.delete_destination(user_id=user["id"])

            self.storage.update_user_status(chat_id=query.message.chat.id, status=Status.IN_MENU)

            await query.edit_message_text('–ß—Ç–æ –∏—â–µ—Ç–µ?', reply_markup=get_main_menu())
        elif query.data == "cancel":
            self.storage.update_user_status(chat_id=query.message.chat.id, status=Status.IN_MENU)

            destination = self.storage.get_destination(user_id=user["id"])

            bot = query.message.get_bot()
            chat_id = query.message.chat.id

            await bot.delete_message(chat_id=chat_id, message_id=destination["map_message_id"])
            await bot.delete_message(chat_id=chat_id, message_id=destination["message_id"])

            await bot.send_message(chat_id=chat_id, text='–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=get_main_menu())

            self.storage.delete_destination(user_id=user["id"])
        elif query.data == "delete":
            self.storage.delete_user(chat_id=query.message.chat.id)

            await query.edit_message_text('–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–æ–¥–µ–ª–∏—Ç–µ–ª—å –ª–æ–∫–∞—Ü–∏–µ–π.')
        else:
            await context.bot.sendChatAction(chat_id=query.message.chat.id, action=ChatAction.TYPING)

            data = get_callback_data_from_base64(query.data)

            if user["status"] == Status.CHOOSING and data:
                latitude, longitude = data.split(',')

                name = ""

                for button in query.message.reply_markup.inline_keyboard:
                    if button[0]["callback_data"] == query.data:
                        name = button[0]["text"]

                        break

                dist = distance((user["latitude"], user["longitude"]),
                                (latitude, longitude)).meters

                bot = query.message.get_bot()
                chat_id = query.message.chat.id

                map_message = await bot.send_location(chat_id=chat_id, latitude=latitude, longitude=longitude)

                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)

                message = await bot.send_message(chat_id=chat_id, text=f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ {name}: {dist:.2f} –º–µ—Ç—Ä–æ–≤',
                                                 reply_markup=get_cancel_menu())

                self.storage.create_destination(user_id=user["id"], name=name, latitude=latitude, longitude=longitude,
                                                message_id=message.message_id, map_message_id=map_message.message_id)

                self.storage.update_user_status(chat_id=query.message.chat.id, status=Status.IN_PROGRESS)

            elif user["status"] == Status.IN_CATEGORY:
                osm_types = self.storage.get_osm_types(uuid.UUID(query.data))

                nodes = []

                location = Location(latitude=user["latitude"], longitude=user["longitude"],
                                    search_distance=user["search_distance"])

                for osm_type in osm_types:
                    nodes.extend(self.osm_broker.get_nodes(osm_type=osm_type["type"], osm_name=osm_type["name"],
                                                           user_location=location))

                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ:", reply_markup=get_nodes_menu(nodes))

                self.storage.update_user_status(chat_id=query.message.chat.id, status=Status.CHOOSING)

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = update.message if update.message else update.edited_message

        user = self.storage.get_user(message.chat.id)

        if user:
            if message.text == '/menu':
                if user["status"] != Status.IN_MENU:
                    await message.reply_text('–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é, –ø–æ–∫–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç! –û—Ç–º–µ–Ω–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç!')

                    return

                await message.reply_text("–£–¥–∞—á–Ω—ã—Ö –ø—É—Ç–µ—à–µc—Ç–≤–∏–π!", reply_markup=get_main_menu())
            if user["status"] == Status.UPDATING:
                try:
                    search_distance = int(message.text)
                    self.storage.update_search_distance(chat_id=message.chat.id, search_distance=search_distance)

                    await message.reply_text('–†–∞–¥–∏—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=get_main_menu())

                    self.storage.update_user_status(chat_id=message.chat.id, status=Status.IN_MENU)
                except ValueError:
                    await message.reply_text('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', reply_markup=get_main_menu())

                    self.storage.update_user_status(chat_id=message.chat.id, status=Status.IN_MENU)
            elif user["status"] == Status.CHOOSING:
                try:
                    name, house_number = message.text.split(',')
                    house_number = int(house_number)

                    location = Location(latitude=user["latitude"], longitude=user["longitude"],
                                        search_distance=user["search_distance"])
                    node = self.osm_broker.get_street(name, house_number, location)

                    bot = message.get_bot()
                    chat_id = message.chat.id

                    map_message = await bot.send_location(chat_id=chat_id, latitude=float(node.latitude),
                                                          longitude=float(node.longitude))

                    dist = distance((user["latitude"], user["longitude"]), (node.latitude, node.longitude)).meters

                    message = await bot.send_message(chat_id=chat_id,
                                                     text=f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ {name}, {str(house_number)}: {dist:.2f} –º–µ—Ç—Ä–æ–≤',
                                                     reply_markup=get_cancel_menu())

                    self.storage.create_destination(user_id=user["id"], name=name, latitude=node.latitude,
                                                    longitude=node.longitude,
                                                    message_id=message.message_id,
                                                    map_message_id=map_message.message_id)

                    self.storage.update_user_status(chat_id=message.chat.id, status=Status.IN_PROGRESS)
                except ValueError as e:
                    self.__logger.exception(e)
                    await message.reply_text('–ê–¥—Ä–µ—Å –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=get_main_menu())

                    self.storage.update_user_status(chat_id=message.chat.id, status=Status.IN_MENU)
                except IndexError as e:
                    self.__logger.exception(e)
                    await message.reply_text('–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –≤ —Ä–∞–¥–∏—É—Å–µ 10–∫–º –æ—Ç –≤–∞—Å:(',
                                             reply_markup=get_main_menu())

                    self.storage.update_user_status(chat_id=message.chat.id, status=Status.IN_MENU)
